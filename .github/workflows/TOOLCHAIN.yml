
name: NueXini_TOOLCHAIN

on:
  workflow_dispatch:
    inputs:
      config:
        description: 'Configuration File'
        required: true
        default: 'xiaomi_mi-router-3g.config'
      source:
        description: 'Git Source'
        required: true
        default: '1'
      toolchain:
        description: 'TOOLCHAIN Source'
        required: true
        default: 'https://downloads.immortalwrt.org/snapshots/targets/ramips/mt7621/immortalwrt-toolchain-ramips-mt7621_gcc-8.4.0_musl.Linux-x86_64.tar.xz'

jobs:
  build:
    name: ${{ github.event.inputs.config }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -y update > /dev/null
        sudo -E apt-get -y install $(cat ./.github/workflows/BuildEnviroment) 2>&1 >/dev/null
        sudo -E apt-get -y autoremove --purge > /dev/null
        sudo -E apt-get -y clean > /dev/null
    
    - name: Git Clone
      run: |
        chmod +x $GITHUB_WORKSPACE/sh/*.sh
        releasetag=$(sed -n "${{ github.event.inputs.source }}p" $GITHUB_WORKSPACE/config/releasetag.list)
        git clone $releasetag nuexini
        
    - name: Download TOOLCHAIN
      run: |
        wget ${{ github.event.inputs.toolchain }} --no-check-certificate -q
        
        mkdir -p ./NX_SDK
        tar xf `find ./ -maxdepth 1 -type f -name '*.tar.*'` -C ./NX_SDK
        
        ls ./NX_SDK | grep -E 'toolchain|gcc|musl' > NX_SDK_PATH
        echo ${GITHUB_WORKSPACE}/NX_SDK/`cat NX_SDK_PATH` > NX_SDK_PATH
        
        ls -F `cat NX_SDK_PATH` | grep '/' | grep -i 'toolchain' | sed 's/\/$//g' > NX_SDK_TOOLCHAIN_PATH
        echo "`cat NX_SDK_PATH`/`cat NX_SDK_TOOLCHAIN_PATH`" > NX_SDK_TOOLCHAIN_PATH
        
        ls `cat NX_SDK_TOOLCHAIN_PATH` | grep -i 'linux-musl' > NX_SDK_TOOLCHAIN_PREFIX_PATH
        
        cd `cat NX_SDK_TOOLCHAIN_PATH`/bin
        for utility in 'ar' 'ranlib' 'nm'; do
            echo "`cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PREFIX_PATH`-$utility"
            echo "`cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PREFIX_PATH`-$utility-nolto"
            echo "`cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PREFIX_PATH`-gcc-$utility"
            
            mv "`cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PREFIX_PATH`-$utility" "`cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PREFIX_PATH`-$utility-nolto" >/dev/null 2>&1
            
            mv "`cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PREFIX_PATH`-gcc-$utility" "`cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PREFIX_PATH`-$utility" >/dev/null 2>&1
        done
        
        export PATH=$(cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PATH)/bin:$PATH
        export STAGING_DIR=$GITHUB_WORKSPACE/nuexini/staging_dir:$PATH
        source  /etc/bash.bashrc
        
        echo $(cat $GITHUB_WORKSPACE/NX_SDK_PATH)
        echo $(cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PATH)
        echo $(cat $GITHUB_WORKSPACE/NX_SDK_TOOLCHAIN_PREFIX_PATH)
    
    - name: Feeds
      run: |
        cd nuexini
        $GITHUB_WORKSPACE/sh/Hello_NueXini.sh
        
        ./scripts/feeds update -a > /dev/null
        ./scripts/feeds install -a > /dev/null
        
        cp -rf $GITHUB_WORKSPACE/config/${{ github.event.inputs.config }} ./.config
        
        echo "
        CONFIG_DEVEL=y
        CONFIG_EXTERNAL_TOOLCHAIN=y
        CONFIG_EXTERNAL_TOOLCHAIN_LIBC_USE_MUSL=y
        CONFIG_LIBC="musl"
        CONFIG_LIBC_FILE_SPEC="./lib/ld{*.so*,-linux*.so.*} ./lib/lib{anl,c,cidn,crypt,dl,m,nsl,nss_dns,nss_files,resolv,util}{-*.so,.so.*,.so}"
        CONFIG_LIBC_ROOT_DIR=\"`cat ${GITHUB_WORKSPACE}/NX_SDK_TOOLCHAIN_PATH`\"
        CONFIG_LIBGCC_FILE_SPEC="./lib/libgcc_s.so.*"
        CONFIG_LIBGCC_ROOT_DIR=\"`cat ${GITHUB_WORKSPACE}/NX_SDK_TOOLCHAIN_PATH`\"
        CONFIG_LIBPTHREAD_FILE_SPEC="./lib/libpthread{-*.so,.so.*}"
        CONFIG_LIBPTHREAD_ROOT_DIR=\"`cat ${GITHUB_WORKSPACE}/NX_SDK_TOOLCHAIN_PATH`\"
        CONFIG_LIBRT_FILE_SPEC="./lib/librt{-*.so,.so.*}"
        CONFIG_LIBRT_ROOT_DIR=\"`cat ${GITHUB_WORKSPACE}/NX_SDK_TOOLCHAIN_PATH`\"
        CONFIG_STRIP_ARGS="--strip-all"
        CONFIG_TARGET_NAME=\"`cat ${GITHUB_WORKSPACE}/NX_SDK_TOOLCHAIN_PREFIX_PATH`\"
        CONFIG_TARGET_SUFFIX="musl"
        CONFIG_TOOLCHAIN_BIN_PATH="./usr/bin ./bin"
        CONFIG_TOOLCHAIN_INC_PATH="./usr/include ./include"
        CONFIG_TOOLCHAIN_LIBC="musl"
        CONFIG_TOOLCHAIN_LIB_PATH="./usr/lib ./lib"
        CONFIG_TOOLCHAIN_PREFIX=\"`cat ${GITHUB_WORKSPACE}/NX_SDK_TOOLCHAIN_PREFIX_PATH`-\"
        CONFIG_TOOLCHAIN_ROOT=\"`cat ${GITHUB_WORKSPACE}/NX_SDK_TOOLCHAIN_PATH`\"
        CONFIG_USE_EXTERNAL_LIBC=y
        CONFIG_USE_MUSL=y
        CONFIG_USE_STRIP=y
        " >> .config
        
        $GITHUB_WORKSPACE/sh/Hi_NueXini.sh

    - name: Compile
      run: |
        cd nuexini
        make defconfig > /dev/null
        make download -j8 > /dev/null
        make -j8 || make -j1 V=sc > ./make-error.log 2>&1

    - name: Generate File
      run: |
        cd nuexini
        mkdir -p ./artifact/firmware
        mkdir -p ./artifact/IPK
        cp -rf $(find ./bin/ -type f -name "*.ipk") ./artifact/IPK/
        rm -rf $(find ./bin/targets/ -type d -name "packages")
        cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
        ls -a ./artifact/firmware
        ls -a ./artifact/IPK
        
    - name: Upload error log
      uses: actions/upload-artifact@master
      if: failure()
      with:
        name: build-failure-log
        path: nuexini/make-error.log
    
    - name: Upload Firmware
      uses: actions/upload-artifact@master
      with:
        name: ${{ github.event.inputs.config }}-Firmware
        path: nuexini/artifact/firmware

    - name: Upload Packages
      uses: actions/upload-artifact@master
      with:
        name: ${{ github.event.inputs.config }}-Packages
        path: nuexini/artifact/IPK
